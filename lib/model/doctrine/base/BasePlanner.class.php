<?php

/**
 * BasePlanner
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $id_client
 * @property integer $id_employee
 * @property date $date_begin
 * @property date $date_end
 * @property date $submit_date
 * @property string $contact_name
 * @property string $contact_surname
 * @property text $other_info
 * @property enum $status
 * @property integer $log_price
 * @property string $bonus_code
 * @property User $User
 * @property sfGuardUser $Employee
 * @property Doctrine_Collection $Booking
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method integer             getIdClient()        Returns the current record's "id_client" value
 * @method integer             getIdEmployee()      Returns the current record's "id_employee" value
 * @method date                getDateBegin()       Returns the current record's "date_begin" value
 * @method date                getDateEnd()         Returns the current record's "date_end" value
 * @method date                getSubmitDate()      Returns the current record's "submit_date" value
 * @method string              getContactName()     Returns the current record's "contact_name" value
 * @method string              getContactSurname()  Returns the current record's "contact_surname" value
 * @method text                getOtherInfo()       Returns the current record's "other_info" value
 * @method enum                getStatus()          Returns the current record's "status" value
 * @method integer             getLogPrice()        Returns the current record's "log_price" value
 * @method string              getBonusCode()       Returns the current record's "bonus_code" value
 * @method User                getUser()            Returns the current record's "User" value
 * @method sfGuardUser         getEmployee()        Returns the current record's "Employee" value
 * @method Doctrine_Collection getBooking()         Returns the current record's "Booking" collection
 * @method Planner             setId()              Sets the current record's "id" value
 * @method Planner             setIdClient()        Sets the current record's "id_client" value
 * @method Planner             setIdEmployee()      Sets the current record's "id_employee" value
 * @method Planner             setDateBegin()       Sets the current record's "date_begin" value
 * @method Planner             setDateEnd()         Sets the current record's "date_end" value
 * @method Planner             setSubmitDate()      Sets the current record's "submit_date" value
 * @method Planner             setContactName()     Sets the current record's "contact_name" value
 * @method Planner             setContactSurname()  Sets the current record's "contact_surname" value
 * @method Planner             setOtherInfo()       Sets the current record's "other_info" value
 * @method Planner             setStatus()          Sets the current record's "status" value
 * @method Planner             setLogPrice()        Sets the current record's "log_price" value
 * @method Planner             setBonusCode()       Sets the current record's "bonus_code" value
 * @method Planner             setUser()            Sets the current record's "User" value
 * @method Planner             setEmployee()        Sets the current record's "Employee" value
 * @method Planner             setBooking()         Sets the current record's "Booking" collection
 * 
 * @package    stag
 * @subpackage model
 * @author     Rainmaker
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePlanner extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('planner');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('id_client', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('id_employee', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('date_begin', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));
        $this->hasColumn('date_end', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));
        $this->hasColumn('submit_date', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));
        $this->hasColumn('contact_name', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('contact_surname', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('other_info', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'New',
              1 => 'InProgress',
              2 => 'Closed',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('log_price', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'unsigned' => true,
             ));
        $this->hasColumn('bonus_code', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'id_client',
             'foreign' => 'id'));

        $this->hasOne('sfGuardUser as Employee', array(
             'local' => 'id_employee',
             'foreign' => 'id'));

        $this->hasMany('Booking', array(
             'local' => 'id',
             'foreign' => 'id_planner'));
    }
}